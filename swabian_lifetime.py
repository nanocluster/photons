'''
This file reads from the .photons files generated by the labview program swabian_UI written by Boris Spokoyny, plots the lifetime of the data, and saves the lifetime data as a txt file.

.photons files generated by the swabian_UI is a binary file of (int64) channel_number, n_sync, sync_to_count_delay. channel_number starts from 1 to 8, exlucding the reference channel (usually 0).
'''
import numpy as np
import matplotlib.pyplot as plt
import os, struct, re, glob
import photons as ph


# read photon_records from .photons file and reshape it into a nRecords * 3 array, channel_number, n_sync, sync_to_count_delay
def read_photons(file):
    with open(file, 'rb') as f:
        data = np.fromfile(f, dtype = np.int64)
        data.shape = len(data)//3, 3 # reshape
    return data


# reads the header file .ht3
def get_header(file):
    header = {}
    with open(file,'rb') as f:
        temp = f.read(72)
        temp = f.read(256)
        if temp[:4] == b'none':
            header['Comment'] = 'none'
        else:
            header['Comment'] = temp
        temp = f.read(36)
        header['AcqTime'] = struct.unpack('i',f.read(4))[0]
        temp = f.read(488)
        header['SyncRate'] = struct.unpack('i',f.read(4))[0]
        temp = f.read(12)
        header['nRecords'] = struct.unpack('Q',f.read(8))[0]
    return header


# data is a n * 3 array of photon_records, bin_width and is in ps
def get_lifetime(data, bin_width, time_range):
    ind_time = data[:,2] < time_range
    bins = np.arange(0, time_range + bin_width, bin_width)
    arrival_times = data[ind_time, 2] # time after pulse
    hist, bin_edges = np.histogram(arrival_times, bins)
    # plt.semilogy( bins[:-1], hist)
    # plt.xlabel('Time [ps]')
    # plt.ylabel('Counts')
    # plt.show()
    return hist


if __name__ == '__main__':
    folder_path = 'C:\\Users\\bischof-lab\\Documents\\Weiwei\\190821_swabian_test'
    os.chdir(folder_path)
    file = '4.header'
    # header = {}
    # with open(file) as f:
    #     data = f.read()
    # print(data)
    # data = data.split()
    # header['Comment'] = data[0]
    # header['AcqTime'] = int(data[1])
    # header['SyncRate'] = int(data[2])
    # header['nRecords'] = np.int64(data[3])
    # print(header)
    # header = get_header('3.ht3')
    # print(header)
    temp = ph.photons(file, 1)
    temp.get_lifetime_histogram('4', 340)
    # files =  [f.rstrip('.photons') for f in glob.glob('*.photons')]
    # resolution = 34 * 10 # in ps, must be a multiple of 34
    # hist = []
    #
    # for f in files:
    #     temp = ph.photons(f+'.ht3', 1)
    #     temp.get_lifetime_histogram(f, resolution)
    #     hist.append([temp.histo_lifetime['Time'], temp.histo_lifetime['Lifetime']])
    #
    # for f in hist:
    #     plt.plot(f[0]/1000, f[1])
    # plt.xlabel('Time [ns]')
    # plt.ylabel('Counts')
    # plt.title('Lifetime histogram with resolution ' + str(resolution) + ' ps')
    # plt.legend(files)
    # plt.show()



    # l_files = len(files)
    # bin_width = 150000
    # time_range = 3e7 # in ps
    #
    # bins = np.arange(0, time_range+bin_width, bin_width)
    # l_bins = len(bins)
    # hist = np.zeros((l_files+1, l_bins-1))
    # hist[0,:] = bins[:-1].copy()
    #
    # for i in range(l_files):
    #     photon_records = read_photons(files[i]+'.photons')
    #     temp_hist = get_lifetime(photon_records, bin_width, time_range)
    #     hist[i+1,:] = temp_hist
    #     header = get_header(files[i]+'.ht3')
    #     print('File %s header:' % files[i])
    #     print(header)
    #     plt.semilogy(bins[:-1]/1000, temp_hist)
    #
    # plt.xlabel('Time [ns]')
    # plt.ylabel('Counts')
    # plt.legend(files)
    # plt.title('Lifetime traces of different dots')
    # plt.show()
    #
    # np.savetxt('lifetime.txt', hist)
